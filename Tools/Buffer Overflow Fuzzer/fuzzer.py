import socket
import time
import argparse
from colorama import Fore, Style

def log(msg, level = -1):
	# Levels:
	# 	0 => INFO
	# 	1 => OK
	# 	2 => WARNING
	# 	3 => ERROR
	prefix = ""
	if (level == 0): prefix = Fore.CYAN + "[*] "
	if (level == 1): prefix = Fore.GREEN + "[+] "
	if (level == 2): prefix = Fore.YELLOW + "[-] "
	if (level == 3): prefix = Fore.RED + "[-] "
	print(prefix + msg + Style.RESET_ALL)

# Setup arguments
parser = argparse.ArgumentParser(
	description='''
	Author: Robin van den Hurk
	GitHub: https://github.com/RobinvandenHurk

	This script is created to help fuzzing a application in order to
	get started on developing a buffer overflow exploit.
	''',
	formatter_class=argparse.RawDescriptionHelpFormatter)
parser.add_argument("target", help="Target machine")
parser.add_argument("port", help="Target port", type=int)
parser.add_argument("-p", metavar="prefix", help="Payload prefix", default="")
parser.add_argument("-c", metavar="char", help="Character to use to fuzz", default="A")
parser.add_argument("-i", metavar="increment", help="Length increment per loop", default=100, type=int)
parser.add_argument("-m", metavar="max_increment", help="Maximum increment value", default=3000, type=int)
parser.add_argument("-d", metavar="delay", help="Seconds to wait per loop", default=2, type=int)
parser.add_argument("-a", help="Automatically detect target crash", action='store_true')

# Parse arguments
args = parser.parse_args()
target = args.target
port = args.port
payload_prefix = args.p
fuzz_character = args.c
increment = args.i
max_increment = args.m
delay = args.d
auto_detect = args.a

# Print banner
log("Initiating Fuzzing with settings:", 0)
log("    Target:                  {0}".format(target))
log("    Port:                    {0}".format(port))
log("    Payload prefix:          '{0}'".format(payload_prefix))
log("    Fuzz Character:          '{0}'".format(fuzz_character))
log("    Payload Increment:       {0}".format(increment))
log("    Maximum Increment:       {0}".format(max_increment))
log("    Delay:                   {0}".format(delay))
log("    Auto detect crash:       {0}".format("True" if auto_detect else "False"))
log("")

# Setup loop variables
i = increment
finished = False

# Loop through increments
while i <= max_increment:
	# Create payload
	payload = payload_prefix + (fuzz_character * i)
	# Create socket
	s = socket.socket()

	try:
		# Connect to target
		s.connect((target, port))
	except:
		log("Failed to connect to target. Is it up?", 3)
		finished = True
		break

	# Send payload to target
	s.send(payload.encode())
	# Notify the user
	log("Send buffer with size: {0}".format(len(payload)), 0)
	
	if (auto_detect):
		try:
			# Set timeout
			s.settimeout(delay)
			# Receive data to see if connection is still alive
			data = s.recv(1024)
		except:
			finished = True
			if (i == increment):
				log("Connection timed out at first request. Are you sure the host is up?", 3)
			else:
				# Previous payload crashed the target
				log("Connection timed out! Previous request likely crashed the target.", 1)
				log("Fatal buffer size: {}".format(len(payload) - increment), 1)
			break
		finally:	
			# Close the connection
			s.close()
	else:
		s.close()

	# Wait a little bit
	time.sleep(delay)
	# Increase the buffer length
	i += increment

if (not auto_detect):
	finished = True
	log("Fuzzing done. Has the target application crashed?", 1)

if (not finished):
	# No result has been found (positive nor negative)
	log("Finished without crashing the target. Try to increase the maximum increment", 2)